# Load the mtcars dataset
View(mtcars)
str(mtcars)
dim(mtcars)
head(mtcars, 10)


#Basic R Data Manipulation (Base R):
# Basic R - Filtering using base package
# Filter cars with more than 150 horsepower
high_hp_cars<- mtcars[mtcars$hp>150,]
View(high_hp_cars)


# Basic R - Selecting columns using base package
# Selecting columns: mpg, hp, and wt
selected_columns<- mtcars[,c("mpg", "hp", "wt")]
View(selected_columns)




# Basic R - Filtering rows and Selecting columns using base package
# Filter cars with engine V-shape and selecting columns: wt, vs, and gear
rowscolumns<- mtcars[mtcars$vs==0,c("wt", "vs", "gear")]
View(rowscolumns)


# Basic R - Sorting the dataset on a specific column using base package
#Arrange the mtcars data in descending order based on the horsepower of the cars.
mtrcars_sorted<- mtcars[order(mtcars$hp, decreasing = TRUE),]
View(mtrcars_sorted)
#increasing tanggalin lang yung comma

mtrcars_sorted1<- mtcars[order(mtcars$hp),]



#Basic R Data Manipulation (dplyr package):
#Install and load the package needed.
library(dplyr)
high_hp_cars_dplyr<- mtcars %>% filter(hp>150)
View(high_hp_cars_dplyr)



# Basic R - Filtering using dplyr package
# Filter cars with more than 150 horsepower




# Basic R - Selecting columns using dplyr package
# Selecting columns: mpg, hp, and wt
selected_columns_dplyr<- select(mtcars,mpg, hp, wt)
View(selected_columns_dplyr)



# Basic R - Filtering rows and Selecting columns using dplyr package
# Filter cars with more than 150 horsepower and selecting columns: wt, vs, and gear
rowscolums_dplyr <- mtcars %>% filter(hp >150) %>%  select(wt, vs, gear)
View(rowscolums_dplyr)



# Basic R - Filtering rows and Selecting columns using dplyr package
# Filter cars with more than 150 horsepower and 
#with engine V-shape, also selecting columns: wt, vs, and gear
rowscolumns_dplyr <- mtcars %>% filter(hp > 150 & vs==0) %>% select(wt, vs, gear)
View(rowscolumns_dplyr)



# Basic R - Filtering rows and Selecting columns using dplyr package
# Filter cars with more than 150 horsepower and 
#with engine V-shape, also selecting columns: mpg, cyl, disp, hp,drat and wt
rowscolumns_dplyr2 <- mtcars %>% filter(hp > 150 & vs==0) %>% select(-c(qsec:carb))
View(rowscolumns_dplyr2)



#alternative way
rowscolumns_dplyr2 <- mtcars %>% filter(hp > 150 & vs==0) %>% select(mpg:wt)
View(rowscolumns_dplyr2)



# Basic data manipulation using dplyr package
#Arrange the mtcars data in ascending order based on the horsepower of the cars
#and rename the variables "wt", and "am" to "weight" and "transmission", respectively.
#ascending by default 
mtcars_rename_dplyr<- mtcars %>% arrange(hp) %>% rename(weight=wt, transmission= am)
View(mtcars_rename_dplyr)

#descending
mtcars_rename_dplyr1<- mtcars %>% arrange(desc(hp)) %>% rename(weight=wt, transmission= am)
View(mtcars_rename_dplyr1)


# Create a new column calculating miles per gallon (mpg) to kilometers per liter (kmpl)
mtcars_mutate<- mtcars %>% mutate(kmpl=mpg*2)
View(mtcars_mutate)



# Grouping data and calculating summary statistics (mean, median, and 
#standard deviation of miles per gallon by type of transmission)
mtcars_summary_dplyr<- mtcars %>% group_by(am) %>% 
  summarise(sample_mean=mean(mpg),
  sample_median=median(mpg),
  sample_sd=sd(mpg))
View(mtcars_summary_dplyr)




#Data Visualization
#Install and load the package needed.
library(ggplot2)
library(plotly)


# Scatter plot using base R plot function
plot(mtcars$wt, mtcars$mpg, xlab="Weight (1000 lbs)", 
     ylab= "Miles/(US) gallon", pch = 1, col= "blue", las =1,
     lwd = 5, xlimm=c(1,3), ylim= c(15,30), 
     main = "Scatter Plot for Weight and MPG")


# Scatter plot using ggplot2
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(color = "violet", size = 1, shape = 2) +
  labs(x = "Weight (1000 lbs)", y = "Miles/(US) gallon",
       title = "Scatter Plot for Weight and MPG")

# Scatter plot using plotly
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
       mode = "markers", color = ~am) %>%
      layout(xaxis = list(title = "Weight (1000 lbs)"),
             yaxis = list(title = "Miles/(US) gallon" ),
             title = "Scatter Plot for Weight and MPG") 

 
# Histogram using base R plot function
hist(mtcars$mpg, col= "black", main = "Histogram for MPG",
     lwd = 2, ylab = "Frequency of MPG", xlab = "Miles per Gallon")



# Histogram using ggplot2
ggplot(mtcars, aes(x =mpg)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
  labs(x = "Weight (1000 lbs)", y = "frequency",
       title = "Histogram for Weight and MPG")




# Histogram using plotly
plot_ly(mtcars, x = ~mpg, type = "histogram",
        marker = list(color = "pink")) %>%
  layout(xaxis = list(title = "Miles per gallon)"),
         yaxis = list(title = "Frequency" ),
         title = "Histogram for Weight and MPG") 

# Bar graph using base R plot function
barplot(table(mtcars$cyl), col= "black", main = "Bar Plot for Cylinder",
     lwd = 2, ylab = "Frequency", xlab = "Number of Cyclinder")




# Bar graph using ggplot2
ggplot(mtcars, aes(x = as.factor(cyl))) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Number of Cyclinder", y = "Frequency",
       title = "Bar Plot for Weight and MPG")


# Bar graph using plotly
plot_ly(mtcars, x = ~as.factor(cyl), type = "histogram",
        marker = list(color = "pink")) %>%
  layout(xaxis = list(title = "Number of Cyclinder"),
         yaxis = list(title = "Frequency" ),
         title = "Histogram for Weight and MPG") 


# Box plot using base R plot function
boxplot(mpg~as.factor(cyl), mtcars, col = "white", lwd= 2, las = 2)



# Box plot using ggplot2
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) +
  geom_boxplot(color = "black", fill= "pink") +
  labs(x = "Number of Cyclinder", y = "Frequency" ,
       title = "Box Plot for Number of Cyclinder and MPG")


# Box plot using plotly
plot_ly(mtcars, x = ~as.factor(cyl), y = ~mpg, type = "box") %>%
  layout(xaxis = list(title = "Number of Cyclinder"),
         yaxis = list(title = "Miles/(US) gallon" ),
         title = "Box Plot for Number of Cyclinder and MPG")

# April 3, 2024 (New lesson)
# Count the frequency of each gear type
gear_count <- table(mtcars$gear)
gear_count

# Create a Pie chart using base R plot
pie(gear_count, labels = c("3 Gears", "4 Gears", "5 Gears"),
    col =c("black", "pink", "white"),
    main = "Pie Chart of Car Gears")

# Convert the frequency table to a data frame
gear_df <-as.data.frame(gear_count)
colnames(gear_df) <-c("Gear", "Frequency")
gear_df

# Create a Pie Chart using ggplot2
# Not Finish
ggplot(gear_df, aes(x="", y="Frequency", fill= Gear)) + 
  geom_bar(stat="identity", width=1) +
  labs(x="Car Gears", y="Frequency",
       title ="Pie Chart of Car Gears")+coord_polar(theta="y")+
  scale_fill_manual(values=c("3"="blue", "4"="Red", "5"="violet"))+
  theme_minimal()

# Create a pie chart using plotly
plot_ly(gear_df, labels= ~Gear, values= ~Frequency, type= "pie",
        marker= list(colors = c("red", "blue", "yellow"))) %>%
  layout(xaxis = list(title = "Car Gears"),
         yaxis = list(title = "Frequency" ),
         title = "Pie Chart of Car Gears")

